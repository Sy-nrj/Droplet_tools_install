#!/bin/bash

# Usage:
# bash C_HTTP_Probe_and_Tech_Stack.sh input/targets.txt

set -e

INPUT=$1
if [ -z "$INPUT" ]; then
    echo "[-] Usage: $0 <target_list.txt | single_domain>"
    exit 1
fi

# Define user agents
USER_AGENTS=(
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36"
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36"
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36 Edg/133.0.0.0"
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:135.0) Gecko/20100101 Firefox/135.0"
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
)

# Determine if input is a file or domain
if [ -f "$INPUT" ]; then
    TARGETS=$(cat "$INPUT")
else
    TARGETS="$INPUT"
fi

for domain in $TARGETS; do
    echo "[*] Probing HTTP responses for $domain"

    RESOLVED_FILE="output/subdomains/$domain/resolved/resolved.txt"
    if [ ! -f "$RESOLVED_FILE" ]; then
        echo "[-] Missing resolved file for $domain: $RESOLVED_FILE"
        continue
    fi

    STATUS_CODES_DIR="output/subdomains/$domain/status_codes"
    TECH_STACK_DIR="output/subdomains/$domain/tech_stack"
    mkdir -p "$STATUS_CODES_DIR" "$TECH_STACK_DIR"

    # Randomly select a user agent
    USER_AGENT="${USER_AGENTS[$RANDOM % ${#USER_AGENTS[@]}]}"

    # Probe with httpx and classify by status code
    httpx -l "$RESOLVED_FILE" -silent -status-code -user-agent "$USER_AGENT" | while read -r line; do
        url=$(echo "$line" | cut -d ' ' -f1)
        status_code=$(echo "$line" | cut -d ' ' -f2)

        case $status_code in
            2*) echo "$url" >> "$STATUS_CODES_DIR/20x.txt" ;;
            3*) echo "$url" >> "$STATUS_CODES_DIR/30x.txt" ;;
            4*) echo "$url" >> "$STATUS_CODES_DIR/40x.txt" ;;
            5*) echo "$url" >> "$STATUS_CODES_DIR/50x.txt" ;;
        esac
    done

    # Perform tech stack analysis using webanalyze
    for status_code_dir in "$STATUS_CODES_DIR"/*; do
        status_code=$(basename "$status_code_dir" .txt)
        if [ -s "$status_code_dir" ]; then
            webanalyze -t 10 -u "$status_code_dir" | tee "$TECH_STACK_DIR/${status_code}_tech_stack.txt"
        fi
    done

    # Filter out duplicate tech stacks
    for tech_file in "$TECH_STACK_DIR"/*_tech_stack.txt; do
        sort -u "$tech_file" -o "$tech_file"
    done

    echo "[✓] HTTP probing and tech stack discovery complete for $domain"
done

echo "[✓] All targets processed."
